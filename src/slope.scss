/// Computes a fluid property size using CSS clamp, with optional rounding.
/// Inspired by: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
/// @param {String} $minSize - Minimum property size (with unit).
/// @param {String} $maxSize - Maximum property size (with unit).
/// @param {String|null} $minLimit - Viewport lower limit (with unit), defaults from options if null.
/// @param {String|null} $maxLimit - Viewport upper limit (with unit), defaults from options if null.
/// @param {Number} $digits - Decimal places for rounding (default: 2).
/// @return {String} - CSS clamp expression.
@function slamp($minSize, $maxSize, $minLimit: null, $maxLimit: null, $digits: 2) {
  // Merge default and user options
  $options: map.merge($defaults_slamp_options, $slamp_options);

  // Convert sizes to rem if not already
  $minSizeRem: if(type-of($minSize) == 'number', rem($minSize), $minSize);
  $maxSizeRem: if(type-of($maxSize) == 'number', rem($maxSize), $maxSize);

  // Determine viewport limits
  $minLimitRem: if($minLimit != null,
    if(type-of($minLimit) == 'number', rem($minLimit), $minLimit),
    map.get($options, 'min')
  );
  $maxLimitRem: if($maxLimit != null,
    if(type-of($maxLimit) == 'number', rem($maxLimit), $maxLimit),
    map.get($options, 'max')
  );

  // Calculate slope and intersection
  $slope: math.div(
    num($maxSizeRem) - num($minSizeRem),
    num($maxLimitRem) - num($minLimitRem)
  );
  $intersection: num($minSizeRem) - ($slope * num($minLimitRem));

  // Apply rounding
  $roundedSlope: round-value($slope * 100, $digits);
  $roundedIntersection: round-value($intersection, $digits);

  // Build clamp expression
  @return clamp(
    #{$minSizeRem},
    rem($roundedIntersection) + #{$roundedSlope}vw,
    #{$maxSizeRem}
  );
}
