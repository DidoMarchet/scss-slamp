// Override the original function to improve the utilities for the library
@function unit-global-options() {
  $global-options:(
    // Global Name Global Variable
    root-size:  $root-font-size,
    base-size:  $base-font-size,
    width:      $unit-width,
    height:     $unit-height,
    callback:   $check-callback,
  );

  // Add merge with library options
  $merged_options: map-merge($defaults_slamp_options, $slamp_options);
  $merged_unitconverter_options: map-merge($global-options, $merged_options);

  @return $merged_unitconverter_options;
}

// Conversion function
@function to-unit($input, $unit, $options: ()) {
  // Get Options
  $root-size: unit-get-option($options, root-size);
  $base-size: unit-get-option($options, base-size);
  $width:     unit-get-option($options, width);
  $height:    unit-get-option($options, height);
  $callback:  unit-get-option($options, callback);

  // Check if convertable
  $callback-args: ($input $unit $options);
  @if (not is-null($callback)) and (not call($callback, $callback-args...)) {
    @return $input;
  }

  // Test against valid CSS units
  $units: n-units(0);
  $to-unit: map-get($units, $unit);

  // Error handling – wrong $unit
  // Incomparable units are caught in convertion
  @if not $to-unit {
    @error 'Could not convert to `#{$unit}` – must be a valid CSS unit';
    @return null;
  }

  // Number/incomparable conversion
  @if index(num number ex ch, $unit) {
    $value: num($input);
  }

  // $input is VW, VH, VMIN, VMAX using px as base
  @if index(vw vh vmin vmax, unit($input)) {
    $break: get-break(unit($input), $width, $height, $options);
    $input: ($break * num($input)) * 0.01;
  }

  // $unit is VW, VH, VMIN, VNAX using px as base
  @if index(vw vh vmin vmax, $unit) and not index(num number, unit($input)) {
    $break: num(get-break($unit, $width, $height, $options));
    $input: num(px($input, $options));
    $input: if($break == 0, 0,
    math.div($input, $break) * 100);
  }

  // EM convertion using px as base
  @if index(em, unit($input)) {
    $input: 0 + math.div(num($input) * $base-size, 1px);
  }
  @if index(em, $unit) and not unitless($input) {
    $input: 0 + px($input);
    $input: math.div(num($input) * 1px, $base-size);
  }

  // REM convertion using px as base
  @if index(rem, unit($input)) {
    $input: 0 + math.div(num($input) * $root-size, 1px);
  }
  @if index(rem, $unit) and not unitless($input) {
    // $input: 0px + $input; removing px allows me to use % values
    $input: 0 + $input;
    $input: math.div(num($input) * 1px, $root-size);
  }

  // Bug fix – resolution units seems to be flipped
  @if index(dpi dpcm dppx, $unit){
    $units: (dppx: 0dppx, dpcm: 0dpcm, dpi: 0dpi);
    $input-unit: map-get($units, unit($input));
    $input: if(1dppx < 95dpi,num($input-unit + (num($input) + $to-unit)),$input);
  }

  // Convert
  @return $to-unit + $input;
}